source("~/.active-rstudio-document")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Define your data file path (replace this with your actual file path)
data <- read.csv("/home/avil/TEST2/direction-1k100/direction4k-5.1k.csv", header = TRUE)  # Replace with actual path to your CSV file
# Use the first row as column names and remove the first row from the data
colnames(data) <- as.character(unlist(data[1, ]))  # Set first row as column names
data <- data[-1, ]  # Remove the first row after using it as headers
# Prompt user for the row range
row_from <- as.integer(readline(prompt = "Enter the starting row number: "))
# Subset the data based on the row range
subset_data <- data[row_from:row_to, ]
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Step 1: Load the data (adjust the file path to your specific case)
data <- read.csv("/home/avil/TEST2/direction-1k100/direction4k-5.1k.csv", header = TRUE)
# Step 2: Set the first row as column names and remove it from the data
colnames(data) <- as.character(unlist(data[1, ]))  # Set first row as column names
data <- data[-1, ]  # Remove the first row after using it as headers
# Step 3: Convert all columns to numeric (ignore warnings for now)
data <- data.frame(lapply(data, function(x) as.numeric(as.character(x))))
# Step 4: Print the structure of the data to check for any issues
print(str(data))
# Step 5: Prompt user for the row range
row_from <- as.integer(readline(prompt = "Enter the starting row number: "))
row_to <- as.integer(readline(prompt = "Enter the ending row number: "))
# Step 6: Subset the data based on the row range
subset_data <- data[row_from:row_to, ]
# Step 7: Check the structure of the subsetted data
print(str(subset_data))  # Make sure the subset has numeric values and the right rows
# Step 8: Melt the data for ggplot (convert wide format to long format)
subset_data_melted <- melt(subset_data, id.vars = NULL)
# Step 9: Basic sanity check on the melted data
print(head(subset_data_melted))
# Step 10: Plot the data (Start with a simple plot)
ggplot(subset_data_melted, aes(x = rep(1:nrow(subset_data), ncol(subset_data)),
y = value, color = variable, group = variable)) +
geom_line() +
labs(x = "Row Number", y = "Value", title = "Line Graph for Selected Rows") +
theme_minimal()
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
install.packages("plotly")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
install.packages("plotly")
install.packages("plotly")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
getwd()
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
source("~/Tools and scripts/specific_row_lineplot.R")
# Load necessary libraries
library(plotly)
library(reshape2)
library(RColorBrewer)
# Read the CSV file
data <- read.csv("/home/avil/TEST2/direction-1k100/direction4k-5.1k.csv", header = TRUE)
# Define the position range for the x-axis
positions <- seq(-5000, -5000 + nrow(data) - 1, by = 1)
# Add the position column to the data
data$Position <- positions
# Melt the data to long format
data_long <- melt(data, id.vars = "Position", variable.name = "Dataset", value.name = "Position-wise mean")
# Ensure numeric values
data_long$Position <- as.numeric(data_long$Position)
data_long$`Position-wise mean` <- as.numeric(data_long$`Position-wise mean`)
# Verify the data structure
head(data_long)
# Choose a color palette that supports more colors
color_palette <- colorRampPalette(brewer.pal(8, "Set2"))(length(unique(data_long$Dataset)))
# Create an interactive line plot using Plotly
fig <- plot_ly(data_long, x = ~Position, y = ~`Position-wise mean`, color = ~Dataset, colors = color_palette, type = 'scatter', mode = 'lines')
# Customize the layout
fig <- fig %>%
layout(title = "Interactive Line Plot",
xaxis = list(title = "Position", range = c(min(data_long$Position), max(data_long$Position))),
yaxis = list(title = "Position-wise mean", range = c(min(data_long$`Position-wise mean`), max(data_long$`Position-wise mean`))),
hovermode = 'closest')
# View the plot directly in RStudio's viewer or browser
fig
# Save the plot as an HTML file
htmlwidgets::saveWidget(fig, "interactive_plot.html")
# Load necessary libraries
library(plotly)
library(reshape2)
library(RColorBrewer)
# Read the CSV file
data <- read.csv("/home/avil/TEST2/direction-500to100.csv", header = TRUE)
# Define the position range for the x-axis
positions <- seq(-500, -500 + nrow(data) - 1, by = 1)
# Add the position column to the data
data$Position <- positions
# Melt the data to long format
data_long <- melt(data, id.vars = "Position", variable.name = "Dataset", value.name = "Position-wise mean")
# Ensure numeric values
data_long$Position <- as.numeric(data_long$Position)
data_long$`Position-wise mean` <- as.numeric(data_long$`Position-wise mean`)
# Verify the data structure
head(data_long)
# Choose a color palette that supports more colors
color_palette <- colorRampPalette(brewer.pal(8, "Set2"))(length(unique(data_long$Dataset)))
# Create an interactive line plot using Plotly
fig <- plot_ly(data_long, x = ~Position, y = ~`Position-wise mean`, color = ~Dataset, colors = color_palette, type = 'scatter', mode = 'lines')
# Customize the layout
fig <- fig %>%
layout(title = "Interactive Line Plot",
xaxis = list(title = "Position", range = c(min(data_long$Position), max(data_long$Position))),
yaxis = list(title = "Position-wise mean", range = c(min(data_long$`Position-wise mean`), max(data_long$`Position-wise mean`))),
hovermode = 'closest')
# View the plot directly in RStudio's viewer or browser
fig
# Save the plot as an HTML file
htmlwidgets::saveWidget(fig, "interactive_plot.html")
# Save the plot as an HTML file
htmlwidgets::saveWidget(fig, "interactive_plot.html")
# Load necessary libraries
library(plotly)
library(reshape2)
library(RColorBrewer)
# Read the CSV file
data <- read.csv("/home/avil/TEST2/direction-500to100.csv", header = TRUE)
# Define the position range for the x-axis
positions <- seq(-500, -500 + nrow(data) - 1, by = 1)
# Add the position column to the data
data$Position <- positions
# Melt the data to long format
data_long <- melt(data, id.vars = "Position", variable.name = "Dataset", value.name = "Position-wise mean")
# Ensure numeric values
data_long$Position <- as.numeric(data_long$Position)
data_long$`Position-wise mean` <- as.numeric(data_long$`Position-wise mean`)
# Verify the data structure
head(data_long)
# Choose a color palette that supports more colors
color_palette <- colorRampPalette(brewer.pal(8, "Set2"))(length(unique(data_long$Dataset)))
# Create an interactive line plot using Plotly
fig <- plot_ly(data_long, x = ~Position, y = ~`Position-wise mean`, color = ~Dataset, colors = color_palette, type = 'scatter', mode = 'lines')
# Customize the layout
fig <- fig %>%
layout(title = "Interactive Line Plot",
xaxis = list(title = "Position", range = c(min(data_long$Position), max(data_long$Position))),
yaxis = list(title = "Position-wise mean", range = c(min(data_long$`Position-wise mean`), max(data_long$`Position-wise mean`))),
legend = list(title = list(text = "Datasets")),  # Add legend title
hovermode = 'closest')
# View the plot directly in RStudio's viewer or browser
fig
# Save the plot as an HTML file
htmlwidgets::saveWidget(fig, "directionmin500to100.html")
# Load necessary libraries
library(Hmisc)
# Load necessary libraries
library(Hmisc)
library(corrplot)
library(RColorBrewer)
# Define color palette
color_palette <- brewer.pal(n = 8, name = "RdYlBu")
# Set plotting parameters
par(mfrow = c(1, 2), mar = c(2, 2, 2, 2))  # Set to plot 2 graphs side by side
# List all CSV files in the folder "x"
file_list <- list.files(path = "/home/avil/Shodhaka/DSFAna/Analysed_Promoter/Position_wise_mean",
pattern = "\\.csv$", full.names = TRUE)
# Filter to only include "Direction.csv" and "PersisLength.csv"
target_files <- file_list[grepl("Direction.csv|PersisLength.csv", file_list)]
# Function to calculate and plot correlation matrix for a CSV file
plot_corr_matrix <- function(file_path, file_name) {
# Read the CSV file
data <- read.csv(file_path, header = TRUE)
# Check dimensions of the data
print(paste("Dimensions of", file_name, ":", dim(data)))
# Calculate the correlation matrix with significance using rcorr()
result <- rcorr(as.matrix(data))  # Convert to matrix for rcorr
# Extract the correlation coefficients and p-values
cormatrix <- result$r     # Correlation matrix
pmatrix <- result$P       # P-values
# Plot the correlation matrix with significance (p-values)
corrplot(cormatrix, method = "color", type = "lower", col = color_palette,
cl.pos = 'n', tl.col = "black", tl.pos = 'l', tl.cex = 0.9,
p.mat = pmatrix, pch.cex = 0.5, main = paste("Correlation Matrix -", file_name))
}
# Plot for "Direction.csv"
direction_file <- target_files[grepl("Direction.csv", target_files)]
plot_corr_matrix(direction_file, "Direction.csv")
# Plot for "PersisLength.csv"
persislength_file <- target_files[grepl("PersisLength.csv", target_files)]
plot_corr_matrix(persislength_file, "PersisLength.csv")
# Load necessary libraries
library(Hmisc)
library(corrplot)
library(RColorBrewer)
# Define color palette
color_palette <- brewer.pal(n = 8, name = "RdYlBu")
# Function to calculate and plot correlation matrix for a CSV file
plot_corr_matrix <- function(file_path, file_name) {
# Read the CSV file
data <- read.csv(file_path, header = TRUE)
# Check dimensions of the data
print(paste("Dimensions of", file_name, ":", dim(data)))
# Check the first few rows of the data to ensure structure
print(head(data))
# Ensure all columns are numeric (drop non-numeric columns if any)
numeric_data <- data[sapply(data, is.numeric)]
# If any non-numeric columns were dropped, print a message
if (ncol(data) != ncol(numeric_data)) {
print(paste("Non-numeric columns dropped from", file_name))
}
# Calculate the correlation matrix with significance using rcorr()
result <- rcorr(as.matrix(numeric_data))  # Convert to matrix for rcorr
# Extract the correlation coefficients and p-values
cormatrix <- result$r     # Correlation matrix
pmatrix <- result$P       # P-values
# Plot the correlation matrix with significance (p-values)
corrplot(cormatrix, method = "color", type = "lower", col = color_palette,
cl.pos = 'n', tl.col = "black", tl.pos = 'l', tl.cex = 0.9,
p.mat = pmatrix, pch.cex = 0.5, main = paste("Correlation Matrix -", file_name))
}
# List all CSV files in the folder
file_list <- list.files(path = "/home/avil/Shodhaka/DSFAna/Analysed_Promoter/Position_wise_mean",
pattern = "\\.csv$", full.names = TRUE)
# Filter to only include "Direction.csv" and "PersisLength.csv"
target_files <- file_list[grepl("Direction.csv|PersisLength.csv", file_list)]
# Plot for "Direction.csv"
direction_file <- target_files[grepl("Direction.csv", target_files)]
plot_corr_matrix(direction_file, "Direction.csv")
# Plot for "PersisLength.csv"
persislength_file <- target_files[grepl("PersisLength.csv", target_files)]
plot_corr_matrix(persislength_file, "PersisLength.csv")
# Load necessary libraries
library(Hmisc)
library(corrplot)
library(RColorBrewer)
# Define color palette
color_palette <- brewer.pal(n = 8, name = "RdYlBu")
# Function to calculate and plot correlation matrix for a CSV file
plot_corr_matrix <- function(file_path, file_name) {
# Read the CSV file
data <- read.csv(file_path, header = TRUE)
# Check dimensions of the data
print(paste("Dimensions of", file_name, ":", dim(data)))
# Check the first few rows of the data to ensure structure
print(head(data))
# Ensure all columns are numeric (drop non-numeric columns if any)
numeric_data <- data[sapply(data, is.numeric)]
# If any non-numeric columns were dropped, print a message
if (ncol(data) != ncol(numeric_data)) {
print(paste("Non-numeric columns dropped from", file_name))
}
# Check for missing or NA values
if (any(is.na(numeric_data))) {
print(paste("NA values found in", file_name, "- Removing rows with NAs"))
numeric_data <- na.omit(numeric_data)  # Remove rows with NA values
}
# Ensure that all columns have the same number of rows
min_rows <- min(sapply(numeric_data, length))
numeric_data <- numeric_data[1:min_rows, ]  # Truncate all columns to the same number of rows
# Calculate the correlation matrix with significance using rcorr()
result <- rcorr(as.matrix(numeric_data))  # Convert to matrix for rcorr
# Extract the correlation coefficients and p-values
cormatrix <- result$r     # Correlation matrix
pmatrix <- result$P       # P-values
# Plot the correlation matrix with significance (p-values)
corrplot(cormatrix, method = "color", type = "lower", col = color_palette,
cl.pos = 'n', tl.col = "black", tl.pos = 'l', tl.cex = 0.9,
p.mat = pmatrix, pch.cex = 0.5, main = paste("Correlation Matrix -", file_name))
}
# List all CSV files in the folder
file_list <- list.files(path = "/home/avil/Shodhaka/DSFAna/Analysed_Promoter/Position_wise_mean",
pattern = "\\.csv$", full.names = TRUE)
# Filter to only include "Direction.csv" and "PersisLength.csv"
target_files <- file_list[grepl("Direction.csv|PersisLength.csv", file_list)]
# Plot for "Direction.csv"
direction_file <- target_files[grepl("Direction.csv", target_files)]
plot_corr_matrix(direction_file, "Direction.csv")
library(corrplot)
a<- read.csv("/home/avil/Shodhaka/DSFAna/Analysed_Promoter/Position_wise_mean/Direction.csv")
corrplot(a)
library(corrplot)
a<- read.csv("/home/avil/Shodhaka/DSFAna/Analysed_Promoter/Position_wise_mean/Direction.csv", header = TRUE, row.names = 1)
corrplot(a)
# Load necessary libraries
library(corrplot)
# Read the CSV file without specifying row names
a <- read.csv("/home/avil/Shodhaka/DSFAna/Analysed_Promoter/Position_wise_mean/Direction.csv", header = TRUE)
# Check the structure of the data
str(a)
# Ensure the data is numeric (you might want to convert columns if they are not)
numeric_data <- as.data.frame(lapply(a, as.numeric))
# Calculate the correlation matrix
correlation_matrix <- cor(numeric_data, use = "pairwise.complete.obs")
# Plot the correlation matrix
corrplot(correlation_matrix, method = "circle", type = "lower",
tl.col = "black", tl.srt = 45,  # Text label color and rotation
addCoef.col = "black")  # Add correlation coefficients on the plot
# Load necessary libraries
library(corrplot)
# Read the CSV file without specifying row names
a <- read.csv("/home/avil/Shodhaka/DSFAna/Analysed_Promoter/Position_wise_mean/PersisLength.csv", header = TRUE)
# Check the structure of the data
str(a)
# Ensure the data is numeric (you might want to convert columns if they are not)
numeric_data <- as.data.frame(lapply(a, as.numeric))
# Calculate the correlation matrix
correlation_matrix <- cor(numeric_data, use = "pairwise.complete.obs")
# Plot the correlation matrix
corrplot(correlation_matrix, method = "circle", type = "lower",
tl.col = "black", tl.srt = 45,  # Text label color and rotation
addCoef.col = "black")  # Add correlation coefficients on the plot
# Load necessary libraries
library(corrplot)
# Load necessary libraries
library(corrplot)
library(ggpubr)  # For arranging multiple plots
# Define the directory where the CSV files are located
csv_dir <- "/home/avil/Shodhaka/DSFAna/Analysed_Promoter/Position_wise_mean"
# List all CSV files in the directory (adjust the pattern to match your files)
file_list <- list.files(path = csv_dir, pattern = "\\.csv$", full.names = TRUE)
# Function to read, calculate correlation matrix, and return the corrplot
plot_corr_matrix <- function(file_path) {
# Read the CSV file
data <- read.csv(file_path, header = TRUE)
# Ensure the data is numeric
numeric_data <- as.data.frame(lapply(data, as.numeric))
# Calculate the correlation matrix
correlation_matrix <- cor(numeric_data, use = "pairwise.complete.obs")
# Generate the correlation plot
corrplot(correlation_matrix, method = "circle", type = "lower",
tl.col = "black", tl.srt = 45,  # Text label color and rotation
addCoef.col = "black", title = basename(file_path))
}
# Select the first 10 CSV files (adjust if needed)
selected_files <- file_list[1:10]
# Generate correlation plots for each of the selected files
corr_plots <- lapply(selected_files, plot_corr_matrix)
# Combine the correlation plots into a single grid using ggpubr
combined_plot <- ggarrange(plotlist = corr_plots, ncol = 5, nrow = 2)
setwd("~/Viral_genome_analysis")
library("seqinr")
choosebank()
choosebank("refseq")
choosebank("genbank")
query("SchistosomamRNA", "SP=Schistosoma mansoni AND M=mrna")
attributes("SchistosomamRNA")
choosebank("refseqViruses")
